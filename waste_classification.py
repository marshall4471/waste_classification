# -*- coding: utf-8 -*-
"""waste_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R05ge0mrI6R4jCdWucuCjVNs4EGs2ilw
"""

from keras.models import Sequential
import keras as k
import tensorflow as tf
from keras.models import Sequential
from keras.layers import Conv2D, Activation, BatchNormalization, GlobalAvgPool2D, MaxPooling2D, Flatten, Dense, Dropout
from keras import preprocessing



import zipfile
from google.colab import drive

drive.mount('/content/drive/')
zip_ref = zipfile.ZipFile("/content/waste.zip", 'r')
zip_ref.extractall()
zip_ref.close()

file1= ('/content/dataset/DATASET/TRAIN')

file2= ('/content/dataset/DATASET/TEST')

from keras.preprocessing.image import ImageDataGenerator

train_datagen = k.preprocessing.image.ImageDataGenerator(rescale=1./255, horizontal_flip=True)

train_gen = train_datagen.flow_from_directory(directory = file1, subset='training', target_size=(384,384), shuffle=True, class_mode='binary', batch_size=8)
test_datagen = k.preprocessing.image.ImageDataGenerator(rescale=1./255)
test_gen = test_datagen.flow_from_directory(directory= file2, subset='validation', shuffle=True, class_mode='binary', target_size=(384,384), batch_size=8)

cnn = tf.keras.models.Sequential()
cnn.add(tf.keras.layers.Dense(1, activation='relu', input_shape=[384, 384, 3]))
cnn.add(tf.keras.layers.MaxPooling2D(pool_size=[3,3], strides=2, padding='valid'))
cnn.add(tf.keras.layers.Conv2D(64, kernel_size=[3,3], padding='valid', activation='relu'))
cnn.add(tf.keras.layers.MaxPooling2D(pool_size=[3,3], strides=2, padding='valid'))
cnn.add(tf.keras.layers.Conv2D(32, kernel_size=[3,3],padding='valid', activation='relu' ))
cnn.add(tf.keras.layers.MaxPooling2D(pool_size=[3,3], strides=2, padding='valid'))
cnn.add(tf.keras.layers.Flatten())
cnn.add(tf.keras.layers.Dense(1, activation='sigmoid'))
cnn.compile(optimizer = 'adam', loss='binary_crossentropy', metrics=['accuracy'])
cnn.summary()

history= cnn.fit(train_gen, validation_data = test_gen, epochs=15, verbose=2)

cnn.save('waste_pred.h5')

train_loss, train_acc = cnn.evaluate(train_gen)
print("final train accuracy = {:.2f} , train loss = {:.2f}".format(train_acc*100, train_loss*100))

import cv2

import matplotlib.pyplot as plt

import numpy as np


x = plt.imread('/content/vegetables.jpg')
plt.imshow(x)

x = x/255

x = np.resize(x,(1,384,384,3))

x.shape

classes = list(train_gen.class_indices)

print(classes[np.argmax(cnn.predict(x))])



